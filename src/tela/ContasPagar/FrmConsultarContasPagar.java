/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package tela.ContasPagar;

import com.toedter.calendar.JTextFieldDateEditor;
import controller.ContasPagarController;
import java.awt.Color;
import java.awt.Component;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.File;
import java.net.URL;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumnModel;
import model.Arquivocontaspagar;
import model.Cliente;
import model.Contaspagar;
import modelView.Viewcontaspagar;
import tela.Cliente.FrmConsultaCliente;
import tela.util.Formatacao;
import tela.util.UsuarioLogadoBean;

/**
 *
 * @author Wolverine
 */
public class FrmConsultarContasPagar extends javax.swing.JFrame implements IContasPagar{
    
    private String datePattern;
    private String maskPattern;
    private char placeHolder;
    private List<Viewcontaspagar> listaContas;
    private ContasPagarTableModel modelContas;
    private UsuarioLogadoBean usuarioLogadoBean;
    private Cliente cliente;
    private String sql;
    /**
     * Creates new form FrmConsultarContasPagar
     */
    public FrmConsultarContasPagar(UsuarioLogadoBean usuarioLogadoBean) {
        datePattern = "dd/MM/yyyy";
        maskPattern = "##/##/####";
        placeHolder = '_';
        this.usuarioLogadoBean = usuarioLogadoBean;
        initComponents();
        URL url = this.getClass().getResource("/imagens/logoRelatorio/iconetela.png");
        Image imagemTitulo = Toolkit.getDefaultToolkit().getImage(url);
        this.setIconImage(imagemTitulo);
        this.setLocationRelativeTo(null);
        inicializarCliente();
        criarConsultaContasPagarInicial();
        contasPagarjTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        contasPagarjTable = new javax.swing.JTable();
        vencidajTextField = new javax.swing.JTextField();
        vencendojTextField = new javax.swing.JTextField();
        vencerjTextField = new javax.swing.JTextField();
        totaljTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        unidadejTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        dataIniciojDateChooser = new com.toedter.calendar.JDateChooser(null, null, datePattern, new JTextFieldDateEditor(datePattern,
            maskPattern, placeHolder));
    jLabel4 = new javax.swing.JLabel();
    dataFinaljDateChooser = new com.toedter.calendar.JDateChooser(null, null, datePattern, new JTextFieldDateEditor(datePattern,
        maskPattern, placeHolder));
pesquisarjButton = new javax.swing.JButton();
selecionarjButton = new javax.swing.JButton();
liberadasjCheckBox = new javax.swing.JCheckBox();
autorizadasjCheckBox = new javax.swing.JCheckBox();
BarradeTarefasjToolBar = new javax.swing.JToolBar();
adicionarAPagarjButton = new javax.swing.JButton();
editarAPagarjButton = new javax.swing.JButton();
excluirAPagarjButton = new javax.swing.JButton();
SeparadordeTarefasjSeparator = new javax.swing.JToolBar.Separator();
liberarjButton = new javax.swing.JButton();
usuariosjButton = new javax.swing.JButton();
arquivojButton = new javax.swing.JButton();
voltarTelajButton = new javax.swing.JButton();

setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
setTitle("Consultar Contas a Pagar");

jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

contasPagarjTable.setModel(new javax.swing.table.DefaultTableModel(
    new Object [][] {
        {null, null, null, null, null},
        {null, null, null, null, null},
        {null, null, null, null, null},
        {null, null, null, null, null}
    },
    new String [] {
        "Status", "Data Vencimento", "Cliente", "Descrição", "Valor Conta"
    }
    ) {
        boolean[] canEdit = new boolean [] {
            false, false, false, false, false
        };

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });
    contasPagarjTable.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            contasPagarjTableMouseClicked(evt);
        }
    });
    jScrollPane1.setViewportView(contasPagarjTable);
    if (contasPagarjTable.getColumnModel().getColumnCount() > 0) {
        contasPagarjTable.getColumnModel().getColumn(0).setResizable(false);
        contasPagarjTable.getColumnModel().getColumn(1).setResizable(false);
        contasPagarjTable.getColumnModel().getColumn(2).setResizable(false);
        contasPagarjTable.getColumnModel().getColumn(3).setResizable(false);
        contasPagarjTable.getColumnModel().getColumn(4).setResizable(false);
    }

    vencidajTextField.setEditable(false);
    vencidajTextField.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
    vencidajTextField.setForeground(new java.awt.Color(204, 0, 0));
    vencidajTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    vencidajTextField.setText("0,00");

    vencendojTextField.setEditable(false);
    vencendojTextField.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
    vencendojTextField.setForeground(new java.awt.Color(0, 153, 0));
    vencendojTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    vencendojTextField.setText("0,00");

    vencerjTextField.setEditable(false);
    vencerjTextField.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
    vencerjTextField.setForeground(new java.awt.Color(51, 0, 153));
    vencerjTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    vencerjTextField.setText("0,00");

    totaljTextField.setEditable(false);
    totaljTextField.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
    totaljTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    totaljTextField.setText("0,00");

    jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
    jLabel2.setText("Total de Contas Vencidas");

    jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
    jLabel5.setText("Total de Contas Vencendo");

    jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
    jLabel6.setText("Total de Contas a Vencer");

    jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
    jLabel7.setText("Total de Contas a Pagar");

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 751, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(vencidajTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(vencendojTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(vencerjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel7)
                            .addGap(0, 0, Short.MAX_VALUE))
                        .addComponent(totaljTextField))))
            .addContainerGap())
    );
    jPanel1Layout.setVerticalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel2)
                .addComponent(jLabel5)
                .addComponent(jLabel6)
                .addComponent(jLabel7))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(vencidajTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(vencendojTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(vencerjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(totaljTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

    jLabel1.setText("Unidade");

    unidadejTextField.setEditable(false);

    jLabel3.setText("Data Inicial");

    dataIniciojDateChooser.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusGained(java.awt.event.FocusEvent evt) {
            dataIniciojDateChooserFocusGained(evt);
        }
    });

    jLabel4.setText("Data Final");

    dataFinaljDateChooser.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusGained(java.awt.event.FocusEvent evt) {
            dataFinaljDateChooserFocusGained(evt);
        }
    });

    pesquisarjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/botoes/selecionar.png"))); // NOI18N
    pesquisarjButton.setText("Pesquisar");
    pesquisarjButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            pesquisarjButtonActionPerformed(evt);
        }
    });

    selecionarjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/botoes/selecionar.png"))); // NOI18N
    selecionarjButton.setText("Selecionar");
    selecionarjButton.setToolTipText("Selecionar Cliente");
    selecionarjButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            selecionarjButtonActionPerformed(evt);
        }
    });

    liberadasjCheckBox.setText("Liberadas");
    liberadasjCheckBox.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            liberadasjCheckBoxItemStateChanged(evt);
        }
    });

    autorizadasjCheckBox.setText("Autorizadas");
    autorizadasjCheckBox.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            autorizadasjCheckBoxItemStateChanged(evt);
        }
    });

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel1)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addComponent(unidadejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(selecionarjButton)))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                    .addComponent(jLabel3)
                    .addGap(57, 57, 57))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                    .addComponent(dataIniciojDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(dataFinaljDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel4))
            .addGap(18, 18, 18)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addComponent(liberadasjCheckBox)
                    .addGap(10, 10, 10)
                    .addComponent(autorizadasjCheckBox))
                .addComponent(pesquisarjButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    jPanel2Layout.setVerticalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                    .addComponent(jLabel1)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(unidadejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(selecionarjButton)))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(dataFinaljDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(dataIniciojDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(liberadasjCheckBox)
                        .addComponent(autorizadasjCheckBox))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(pesquisarjButton)))
            .addGap(58, 58, 58))
    );

    BarradeTarefasjToolBar.setFloatable(false);
    BarradeTarefasjToolBar.setRollover(true);

    adicionarAPagarjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/botoes/adicionar.png"))); // NOI18N
    adicionarAPagarjButton.setText("Adicionar");
    adicionarAPagarjButton.setToolTipText("Adicionar Contas a Pagar");
    adicionarAPagarjButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    adicionarAPagarjButton.setMaximumSize(new java.awt.Dimension(80, 90));
    adicionarAPagarjButton.setMinimumSize(new java.awt.Dimension(80, 90));
    adicionarAPagarjButton.setName(""); // NOI18N
    adicionarAPagarjButton.setPreferredSize(new java.awt.Dimension(80, 90));
    adicionarAPagarjButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    adicionarAPagarjButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            adicionarAPagarjButtonActionPerformed(evt);
        }
    });
    BarradeTarefasjToolBar.add(adicionarAPagarjButton);

    editarAPagarjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/botoes/editar.png"))); // NOI18N
    editarAPagarjButton.setText("Editar");
    editarAPagarjButton.setToolTipText("Editar Contas a Pagar");
    editarAPagarjButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    editarAPagarjButton.setMaximumSize(new java.awt.Dimension(80, 90));
    editarAPagarjButton.setMinimumSize(new java.awt.Dimension(80, 90));
    editarAPagarjButton.setPreferredSize(new java.awt.Dimension(80, 90));
    editarAPagarjButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    editarAPagarjButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            editarAPagarjButtonActionPerformed(evt);
        }
    });
    BarradeTarefasjToolBar.add(editarAPagarjButton);

    excluirAPagarjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/botoes/excluir.png"))); // NOI18N
    excluirAPagarjButton.setText("Excluir");
    excluirAPagarjButton.setToolTipText("Excluir Contas a Pagar");
    excluirAPagarjButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    excluirAPagarjButton.setMaximumSize(new java.awt.Dimension(80, 90));
    excluirAPagarjButton.setMinimumSize(new java.awt.Dimension(80, 90));
    excluirAPagarjButton.setPreferredSize(new java.awt.Dimension(80, 90));
    excluirAPagarjButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    excluirAPagarjButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            excluirAPagarjButtonActionPerformed(evt);
        }
    });
    BarradeTarefasjToolBar.add(excluirAPagarjButton);
    BarradeTarefasjToolBar.add(SeparadordeTarefasjSeparator);

    liberarjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/botoes/liberar.png"))); // NOI18N
    liberarjButton.setText("Liberar");
    liberarjButton.setToolTipText("Liberar Pagamento");
    liberarjButton.setFocusable(false);
    liberarjButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    liberarjButton.setMaximumSize(new java.awt.Dimension(80, 90));
    liberarjButton.setMinimumSize(new java.awt.Dimension(80, 90));
    liberarjButton.setPreferredSize(new java.awt.Dimension(80, 90));
    liberarjButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    liberarjButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            liberarjButtonActionPerformed(evt);
        }
    });
    BarradeTarefasjToolBar.add(liberarjButton);

    usuariosjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/botoes/grupo usuarios.png"))); // NOI18N
    usuariosjButton.setText("Usuários");
    usuariosjButton.setToolTipText("Usuários");
    usuariosjButton.setFocusable(false);
    usuariosjButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    usuariosjButton.setMaximumSize(new java.awt.Dimension(80, 90));
    usuariosjButton.setMinimumSize(new java.awt.Dimension(80, 90));
    usuariosjButton.setPreferredSize(new java.awt.Dimension(80, 90));
    usuariosjButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    usuariosjButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            usuariosjButtonActionPerformed(evt);
        }
    });
    BarradeTarefasjToolBar.add(usuariosjButton);

    arquivojButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/botoes/arquivos.png"))); // NOI18N
    arquivojButton.setText("Arquivo");
    arquivojButton.setToolTipText("Salvar arquivo");
    arquivojButton.setFocusable(false);
    arquivojButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    arquivojButton.setMaximumSize(new java.awt.Dimension(80, 90));
    arquivojButton.setMinimumSize(new java.awt.Dimension(80, 90));
    arquivojButton.setPreferredSize(new java.awt.Dimension(80, 90));
    arquivojButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    arquivojButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            arquivojButtonActionPerformed(evt);
        }
    });
    BarradeTarefasjToolBar.add(arquivojButton);

    voltarTelajButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/botoes/voltar.png"))); // NOI18N
    voltarTelajButton.setText("Voltar");
    voltarTelajButton.setToolTipText("Voltar");
    voltarTelajButton.setFocusable(false);
    voltarTelajButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    voltarTelajButton.setMaximumSize(new java.awt.Dimension(80, 90));
    voltarTelajButton.setMinimumSize(new java.awt.Dimension(80, 90));
    voltarTelajButton.setPreferredSize(new java.awt.Dimension(80, 90));
    voltarTelajButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    voltarTelajButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            voltarTelajButtonActionPerformed(evt);
        }
    });
    BarradeTarefasjToolBar.add(voltarTelajButton);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap())
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(91, Short.MAX_VALUE)
                .addComponent(BarradeTarefasjToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(136, Short.MAX_VALUE)))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(102, Short.MAX_VALUE))
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(485, Short.MAX_VALUE)
                .addComponent(BarradeTarefasjToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap()))
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dataIniciojDateChooserFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dataIniciojDateChooserFocusGained

    }//GEN-LAST:event_dataIniciojDateChooserFocusGained

    private void dataFinaljDateChooserFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dataFinaljDateChooserFocusGained

    }//GEN-LAST:event_dataFinaljDateChooserFocusGained

    private void adicionarAPagarjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adicionarAPagarjButtonActionPerformed
        new FrmCadastarContasPagar(usuarioLogadoBean, null, this);

    }//GEN-LAST:event_adicionarAPagarjButtonActionPerformed

    private void editarAPagarjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarAPagarjButtonActionPerformed
        int linha = contasPagarjTable.getSelectedRow();
        if (linha>=0){
            ContasPagarController contasPagarController = new ContasPagarController();
            Contaspagar contas = contasPagarController.consultar(listaContas.get(linha).getIdcontasPagar());
            new FrmCadastarContasPagar(usuarioLogadoBean, contas, this);
        }
    }//GEN-LAST:event_editarAPagarjButtonActionPerformed

    private void excluirAPagarjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excluirAPagarjButtonActionPerformed
        int linha = contasPagarjTable.getSelectedRow();
        if (linha >= 0) {
            boolean resultado = JOptionPane.showConfirmDialog(null, "Confirma exclusão?", "Excluir", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == 0;
            if (resultado) {
                ContasPagarController contasPagarController = new ContasPagarController();
                contasPagarController.excluir(listaContas.get(linha).getIdcontasPagar());
                JOptionPane.showMessageDialog(rootPane, " Contas excluida com sucesso");
                criarConsultaContasPagarInicial();
            }
        }
    }//GEN-LAST:event_excluirAPagarjButtonActionPerformed

    private void voltarTelajButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_voltarTelajButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_voltarTelajButtonActionPerformed

    private void liberarjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_liberarjButtonActionPerformed
        List<Contaspagar> listaContasSelecionadas = new ArrayList<Contaspagar>();
        ContasPagarController contasPagarController = new ContasPagarController();
        for (int i = 0; i < listaContas.size(); i++) {
            if (listaContas.get(i).getMarcar() != null) {
                if (listaContas.get(i).getMarcar().equalsIgnoreCase("S")) {
                    Contaspagar conta = contasPagarController.consultar(listaContas.get(i).getIdcontasPagar());
                    if (conta != null) {
                        listaContasSelecionadas.add(conta);
                    }
                }
            }
        }
        new FrmLibearConta(usuarioLogadoBean, this, listaContasSelecionadas);
    }//GEN-LAST:event_liberarjButtonActionPerformed

    private void pesquisarjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pesquisarjButtonActionPerformed
        sql = "Select v from Viewcontaspagar v where  ";
        if (liberadasjCheckBox.isSelected()){
            sql = sql + " v.contaPaga='S' and ";
        }else sql = sql + " v.contaPaga='N' and ";
        if (autorizadasjCheckBox.isSelected()){
            sql = sql + " v.autorizarPagamento='S' and ";
        }
        if (cliente!=null){
            sql = sql + " v.clienteIdcliente=" + cliente.getIdcliente() + " and ";
        }
        if (liberadasjCheckBox.isSelected()){
            sql = sql + "v.dataLiberacao>='" + Formatacao.ConvercaoDataSql(dataIniciojDateChooser.getDate()) + 
                "' and v.dataLiberacao<='" + Formatacao.ConvercaoDataSql(dataFinaljDateChooser.getDate()) + 
                "' order by v.dataLiberacao";
        }else {
            sql = sql + "v.dataVencimento>='" + Formatacao.ConvercaoDataSql(dataIniciojDateChooser.getDate()) + 
                "' and v.dataVencimento<='" + Formatacao.ConvercaoDataSql(dataFinaljDateChooser.getDate()) + 
                "' order by v.dataVencimento";
        }
        carregarModel();
    }//GEN-LAST:event_pesquisarjButtonActionPerformed

    private void selecionarjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selecionarjButtonActionPerformed
       new FrmConsultaCliente(usuarioLogadoBean, this); 
    }//GEN-LAST:event_selecionarjButtonActionPerformed

    private void usuariosjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usuariosjButtonActionPerformed
        int linha = contasPagarjTable.getSelectedRow();
        if (linha>=0){
            ContasPagarController contasPagarController = new ContasPagarController();
            Contaspagar contas = contasPagarController.consultar(listaContas.get(linha).getIdcontasPagar());
            new FrmContasPagarUsuarios(contas);
        }
    }//GEN-LAST:event_usuariosjButtonActionPerformed

    private void liberadasjCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_liberadasjCheckBoxItemStateChanged
        if (liberadasjCheckBox.isSelected()){
            excluirAPagarjButton.setEnabled(false);
            liberarjButton.setEnabled(false);
        }else {
            excluirAPagarjButton.setEnabled(true);
            liberarjButton.setEnabled(true);
        }
    }//GEN-LAST:event_liberadasjCheckBoxItemStateChanged

    private void arquivojButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arquivojButtonActionPerformed
        int linha = contasPagarjTable.getSelectedRow();
        if (linha>=0){
            ContasPagarController contasPagarController = new ContasPagarController();
            Arquivocontaspagar arquivo = contasPagarController.consultarArquivo(listaContas.get(linha).getIdcontasPagar());
            if (arquivo!=null){
                if (arquivo.getArquivo01()!=null){
                    new FrmMostrar(arquivo);
                }else JOptionPane.showMessageDialog(rootPane, " Conta não possui arquivo");
            }
        }
    }//GEN-LAST:event_arquivojButtonActionPerformed

    private void contasPagarjTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_contasPagarjTableMouseClicked
        if (evt.getClickCount() == 2) {
            int coluna = contasPagarjTable.getSelectedColumn();
            int linha = contasPagarjTable.getSelectedRow();
            if (linha >= 0) {
                if (coluna != 5) {
                    if (listaContas.get(linha).getDataLiberacao() == null) {
                        marcarDesmarcarConta(linha);
                    }
                } else if (coluna == 5) {
                    marcarDesmarcarAutorizaPagamento(linha);
                }
            }
        }
    }//GEN-LAST:event_contasPagarjTableMouseClicked

    private void autorizadasjCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_autorizadasjCheckBoxItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_autorizadasjCheckBoxItemStateChanged

    /**
     * @param args the command line arguments
     */
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToolBar BarradeTarefasjToolBar;
    private javax.swing.JToolBar.Separator SeparadordeTarefasjSeparator;
    private javax.swing.JButton adicionarAPagarjButton;
    private javax.swing.JButton arquivojButton;
    private javax.swing.JCheckBox autorizadasjCheckBox;
    private javax.swing.JTable contasPagarjTable;
    private com.toedter.calendar.JDateChooser dataFinaljDateChooser;
    private com.toedter.calendar.JDateChooser dataIniciojDateChooser;
    private javax.swing.JButton editarAPagarjButton;
    private javax.swing.JButton excluirAPagarjButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox liberadasjCheckBox;
    private javax.swing.JButton liberarjButton;
    private javax.swing.JButton pesquisarjButton;
    private javax.swing.JButton selecionarjButton;
    private javax.swing.JTextField totaljTextField;
    private javax.swing.JTextField unidadejTextField;
    private javax.swing.JButton usuariosjButton;
    private javax.swing.JTextField vencendojTextField;
    private javax.swing.JTextField vencerjTextField;
    private javax.swing.JTextField vencidajTextField;
    private javax.swing.JButton voltarTelajButton;
    // End of variables declaration//GEN-END:variables

    public void carregarModel(){
        ContasPagarController contasPagarController = new ContasPagarController();
        listaContas = contasPagarController.listar(sql);
        if (listaContas==null){
            listaContas = new ArrayList<Viewcontaspagar>();
        }
        
        modelContas = new ContasPagarTableModel(listaContas);
        contasPagarjTable.setModel(modelContas);
        TableColumnModel ColumnModel = contasPagarjTable.getColumnModel();  
        JTableRenderer renderer = new JTableRenderer();  
        ColumnModel.getColumn(0).setCellRenderer(renderer);
        ColumnModel.getColumn(5).setCellRenderer(renderer);
        renderer.setHorizontalAlignment(SwingConstants.CENTER);
        DefaultTableCellRenderer rendererValor = new DefaultTableCellRenderer();
        rendererValor.setHorizontalAlignment(SwingConstants.RIGHT);
        contasPagarjTable.getColumnModel().getColumn(0).setPreferredWidth(10);
        contasPagarjTable.getColumnModel().getColumn(1).setPreferredWidth(80);
        contasPagarjTable.getColumnModel().getColumn(2).setPreferredWidth(180);
        contasPagarjTable.getColumnModel().getColumn(3).setPreferredWidth(230);
        contasPagarjTable.getColumnModel().getColumn(4).setCellRenderer(rendererValor);
        contasPagarjTable.getColumnModel().getColumn(4).setPreferredWidth(80);
        contasPagarjTable.getColumnModel().getColumn(5).setPreferredWidth(50);
        contasPagarjTable.repaint();
        calcularTotal();
    }
    
    public void criarConsultaContasPagarInicial(){
        String data = Formatacao.ConvercaoDataPadrao(new Date());
        String mesString = data.substring(3, 5);
        String anoString = data.substring(6, 10);
        int mesInicio = Integer.parseInt(mesString);
        int anoInicio = Integer.parseInt(anoString);
        int mescInicio;
        int mescFinal;
        int anocInicio = 0;
        int anocFinal = 0;
        if (mesInicio==1){
            mescInicio=12;
            anocInicio=anoInicio - 1;
        }else {
            mescInicio = mesInicio - 1;
            anocInicio = anoInicio;
        }
        if (mesInicio==12){
            mescFinal=1;
            anocFinal=anoInicio+1;
        }else {
            mescFinal = mesInicio  + 1;
            anocFinal = anoInicio;
        }
        String dataInicial = anocInicio + "-" + Formatacao.retornaDataInicia(mescInicio);
        String dataFinal = anocFinal + "-" + Formatacao.retornaDataFinal(mescFinal);
        dataIniciojDateChooser.setDate(Formatacao.ConvercaoStringData(dataInicial));
        dataFinaljDateChooser.setDate(Formatacao.ConvercaoStringData(dataFinal));
        sql = " Select v from Viewcontaspagar v where v.dataVencimento>='" + dataInicial + 
                "' and v.dataVencimento<='" + dataFinal + "' and v.contaPaga='N' ";
         if (cliente!=null){
            sql = sql + " and v.clienteIdcliente=" + cliente.getIdcliente();
        }
        sql = sql + " order by v.dataVencimento";
         
        carregarModel();
    }

    @Override
    public void setModel() {
        criarConsultaContasPagarInicial();
    }

    @Override
    public void setArquivo(File arquivo, int numeroArquivo) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setCliente(Cliente cliente) {
        if (cliente!=null){
            this.cliente = cliente;
            unidadejTextField.setText(cliente.getNomeFantasia());
        }
    }

    @Override
    public void exportarExcel(String caminho, String nomeArquivo) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    public void inicializarCliente(){
        this.cliente = Formatacao.consultarCliente(usuarioLogadoBean);
        if (cliente!=null){
            unidadejTextField.setText(cliente.getNomeFantasia());
            selecionarjButton.setEnabled(false);
        }
    }
    
    public void marcarDesmarcarAutorizaPagamento(int linha) {
        ContasPagarController contasPagarController = new ContasPagarController();
        if (listaContas.get(linha).getDataAgendamento() == null) {
            if (listaContas.get(linha).getAutorizarPagamento().equalsIgnoreCase("N")) {
                Contaspagar conta = contasPagarController.consultar(listaContas.get(linha).getIdcontasPagar());
                if (conta != null) {
                    conta.setAutorizarPagamento("S");
                    conta.setUsuarioAutorizou(usuarioLogadoBean.getUsuario().getIdusuario());
                    contasPagarController.salvar(conta);
                    listaContas.get(linha).setAutorizarPagamento("S");
                }
            } else {
                Contaspagar conta = contasPagarController.consultar(listaContas.get(linha).getIdcontasPagar());
                if (conta != null) {
                    if (conta.getUsuarioAutorizou() == usuarioLogadoBean.getUsuario().getIdusuario()) {
                        conta.setAutorizarPagamento("N");
                        conta.setUsuarioAutorizou(0);
                        contasPagarController.salvar(conta);
                        listaContas.get(linha).setAutorizarPagamento("N");
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Usuário atual não foi quem autorizou esta conta");
                    }
                }
            }
            carregarModel();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Conta já possui agendamento");
        }
    }
    
    public void marcarDesmarcarConta(int linha){
        if (listaContas.get(linha).getMarcar()==null){
            listaContas.get(linha).setMarcar("N");
        }
        if (listaContas.get(linha).getMarcar().equalsIgnoreCase("N")){
            if (listaContas.get(linha).getDataCompensacao()!=null){
                if (listaContas.get(linha).getAutorizarPagamento().equalsIgnoreCase("S")){
                    listaContas.get(linha).setMarcar("S");
                }else JOptionPane.showMessageDialog(rootPane, "Conta não autorizada para Liberação");
            }else JOptionPane.showMessageDialog(rootPane, "Conta sem data de compensação");
        }else listaContas.get(linha).setMarcar("N");
        DefaultTableCellRenderer rendererCor = new DefaultTableCellRenderer(){
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                        boolean isSelected, boolean hasFocus, int row, int column) {
                    Component comp = super.getTableCellRendererComponent(table, value,
                            isSelected, hasFocus, row, column);   
                        if (listaContas.get(row).getMarcar().equalsIgnoreCase("S")){
                            comp.setBackground(Color.red);
                        }else  comp.setBackground(Color.white);
                    return comp;
                }
        };
        modelContas = new ContasPagarTableModel(listaContas);
        contasPagarjTable.setModel(modelContas);
        TableColumnModel ColumnModel = contasPagarjTable.getColumnModel();  
        JTableRenderer renderer = new JTableRenderer();  
        ColumnModel.getColumn(0).setCellRenderer(renderer);
        ColumnModel.getColumn(5).setCellRenderer(renderer);
        renderer.setHorizontalAlignment(SwingConstants.CENTER);
        DefaultTableCellRenderer rendererValor = new DefaultTableCellRenderer();
        rendererValor.setHorizontalAlignment(SwingConstants.RIGHT);
        contasPagarjTable.getColumnModel().getColumn(0).setPreferredWidth(10);
        contasPagarjTable.getColumnModel().getColumn(1).setCellRenderer(rendererCor);
        contasPagarjTable.getColumnModel().getColumn(1).setPreferredWidth(80);
        contasPagarjTable.getColumnModel().getColumn(2).setPreferredWidth(180);
        contasPagarjTable.getColumnModel().getColumn(3).setPreferredWidth(230);
        contasPagarjTable.getColumnModel().getColumn(4).setCellRenderer(rendererValor);
        contasPagarjTable.getColumnModel().getColumn(4).setPreferredWidth(80);
        contasPagarjTable.getColumnModel().getColumn(5).setPreferredWidth(50);
        contasPagarjTable.repaint();
        calcularTotal();
    }
    
    public void calcularTotal(){
        float vencida=0.0f;
        float vencendo=0.0f;
        float vencer=0.0f;
        Date data = new Date();
        String diaData = Formatacao.ConvercaoDataPadrao(data);
        for(int i=0;i<listaContas.size();i++){
            String vencData = Formatacao.ConvercaoDataPadrao(listaContas.get(i).getDataVencimento());
            if (diaData.equalsIgnoreCase(vencData)){
                vencendo = vencendo + listaContas.get(i).getValor();
            }else if (listaContas.get(i).getDataVencimento().before(data)){
                vencida = vencida + listaContas.get(i).getValor();
            }else if (listaContas.get(i).getDataVencimento().after(data)){
                vencer = vencer + listaContas.get(i).getValor();
            }
        }
        vencidajTextField.setText(Formatacao.foramtarFloatString(vencida));
        vencendojTextField.setText(Formatacao.foramtarFloatString(vencendo));
        vencerjTextField.setText(Formatacao.foramtarFloatString(vencer));
        totaljTextField.setText(Formatacao.foramtarFloatString(vencida+vencer+vencendo));
    } 

}
